<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>3CX Relay - Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
  <style>
    body { background: #f8f9fa; }
    .sidebar { background: #2c3e50; color: white; min-height: 100vh; }
    .sidebar .nav-link { color: rgba(255,255,255,0.8); }
    .sidebar .nav-link:hover { color: white; background: rgba(255,255,255,0.1); }
    .sidebar .nav-link.active { background: #3498db; color: white; }
    .status-card { border-left: 4px solid; }
    .status-connected { border-color: #28a745; }
    .status-disconnected { border-color: #dc3545; }
    .status-connecting { border-color: #ffc107; }
    .status-badge { font-size: 0.75rem; padding: 0.25rem 0.5rem; }
  </style>
</head>
<body>
  <div class="container-fluid">
    <div class="row">
      <!-- Sidebar -->
      <div class="col-md-2 sidebar p-3">
        <h4 class="mb-4"><i class="bi bi-diagram-3"></i> 3CX Relay</h4>
        <nav class="nav flex-column">
          <a class="nav-link active" href="#"><i class="bi bi-speedometer2"></i> Dashboard</a>
          <a class="nav-link" href="#" onclick="showSection('api-keys')"><i class="bi bi-key"></i> API Keys</a>
          <a class="nav-link" href="#" onclick="showSection('errors')"><i class="bi bi-exclamation-triangle"></i> Errors</a>
          <% if (user.role === 'admin') { %>
          <a class="nav-link" href="#" onclick="showSection('users')"><i class="bi bi-people"></i> Users</a>
          <% } %>
          <hr class="text-white">
          <a class="nav-link" href="#" onclick="logout()"><i class="bi bi-box-arrow-right"></i> Logout</a>
        </nav>
        <div class="mt-4 small">
          <p class="mb-1">Logged in as:</p>
          <p class="mb-0"><strong><%= user.username %></strong></p>
          <p class="text-muted"><%= user.role %></p>
        </div>
      </div>

      <!-- Main Content -->
      <div class="col-md-10 p-4">
        <h2 class="mb-4">Dashboard</h2>

        <!-- Connection Status -->
        <div class="row mb-4">
          <div class="col-md-4">
            <div class="card status-card status-connected">
              <div class="card-body">
                <h6 class="card-title">Database</h6>
                <div id="db-status">
                  <span class="badge bg-secondary">Loading...</span>
                  <p class="mb-0 mt-2 small" id="db-info"></p>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="card status-card status-connected">
              <div class="card-body">
                <h6 class="card-title">XAPI</h6>
                <div id="xapi-status">
                  <span class="badge bg-secondary">Loading...</span>
                  <p class="mb-0 mt-2 small" id="xapi-info"></p>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-4">
            <div class="card status-card status-connected">
              <div class="card-body">
                <h6 class="card-title">WebSocket</h6>
                <div id="ws-status">
                  <span class="badge bg-secondary">Loading...</span>
                  <p class="mb-0 mt-2 small" id="ws-info"></p>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Stats -->
        <div class="row mb-4">
          <div class="col-md-3">
            <div class="card">
              <div class="card-body text-center">
                <h3 id="stat-clients">0</h3>
                <p class="text-muted mb-0">Active Clients</p>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card">
              <div class="card-body text-center">
                <h3 id="stat-requests">0</h3>
                <p class="text-muted mb-0">Total Requests</p>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card">
              <div class="card-body text-center">
                <h3 id="stat-events">0</h3>
                <p class="text-muted mb-0">Call Events</p>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card">
              <div class="card-body text-center">
                <h3 id="stat-uptime">0h</h3>
                <p class="text-muted mb-0">Uptime</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Recent Errors -->
        <div class="card">
          <div class="card-header">
            <h5 class="mb-0">Recent Errors</h5>
          </div>
          <div class="card-body">
            <div id="recent-errors">
              <p class="text-muted">Loading errors...</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.socket.io/4.6.0/socket.io.min.js"></script>
  <script>
    const socket = io({ path: '/admin/socket.io' });
    
    // Update connection status
    socket.on('connection_status', (status) => {
      updateConnectionStatus('db', status.database);
      updateConnectionStatus('xapi', status.xapi);
      updateConnectionStatus('ws', status.websocket);
    });
    
    // Update stats
    socket.on('stats', (stats) => {
      document.getElementById('stat-clients').textContent = stats.activeClients || 0;
      document.getElementById('stat-requests').textContent = stats.totalRequests || 0;
      document.getElementById('stat-events').textContent = stats.callEventsRelayed || 0;
      if (stats.uptime) {
        const hours = Math.floor(stats.uptime / 3600000);
        document.getElementById('stat-uptime').textContent = hours + 'h';
      }
    });
    
    // Update errors
    socket.on('new_error', (error) => {
      console.log('New error:', error);
      loadRecentErrors();
    });
    
    function updateConnectionStatus(component, status) {
      const badge = document.getElementById(component + '-status').querySelector('.badge');
      const info = document.getElementById(component + '-info');
      
      badge.className = 'badge';
      if (status.state === 'connected') {
        badge.classList.add('bg-success');
        badge.textContent = 'Connected';
      } else if (status.state === 'connecting') {
        badge.classList.add('bg-warning');
        badge.textContent = 'Connecting';
      } else {
        badge.classList.add('bg-danger');
        badge.textContent = 'Disconnected';
      }
      
      if (status.latency) {
        info.textContent = 'Latency: ' + status.latency + 'ms';
      } else if (status.error) {
        info.textContent = 'Error: ' + status.error;
      }
    }
    
    async function loadRecentErrors() {
      try {
        const response = await fetch('/admin/errors?limit=5');
        const data = await response.json();
        
        if (data.success && data.data.length > 0) {
          const html = data.data.map(err => 
            '<div class="alert alert-' + getSeverityClass(err.severity) + ' mb-2">' +
            '<strong>' + err.component + '</strong>: ' + err.message +
            '<br><small>' + new Date(err.timestamp).toLocaleString() + '</small>' +
            '</div>'
          ).join('');
          document.getElementById('recent-errors').innerHTML = html;
        } else {
          document.getElementById('recent-errors').innerHTML = '<p class="text-muted">No recent errors</p>';
        }
      } catch (error) {
        console.error('Failed to load errors:', error);
      }
    }
    
    function getSeverityClass(severity) {
      const map = { critical: 'danger', error: 'danger', warning: 'warning', info: 'info' };
      return map[severity] || 'secondary';
    }
    
    async function logout() {
      await fetch('/admin/logout', { method: 'POST' });
      window.location.href = '/admin/login';
    }
    
    // Initial load
    loadRecentErrors();
    fetch('/admin/connections').then(r => r.json()).then(data => {
      if (data.success) {
        updateConnectionStatus('db', data.data.database);
        updateConnectionStatus('xapi', data.data.xapi);
        updateConnectionStatus('ws', data.data.websocket);
      }
    });
    
    fetch('/admin/stats').then(r => r.json()).then(data => {
      if (data.success) {
        socket.emit('stats', data.data);
      }
    });
  </script>
</body>
</html>
